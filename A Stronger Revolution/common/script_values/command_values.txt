# the weight of being picked when a new battle occurs on a Front
# root = commander
# is_advancing_side = whether this side is the one advancing or not (defending = no)
front_commander_pick_weight = {
    value = root.num_units

    if = {
        limit = {
			scope:is_advancing_side = no
			has_commander_order = defend
        }
        
        multiply = 4
    }
}

# the troop distribution weight of a Front for a country/commander
# root = country
# front = the front to calculate troop weight for
# character = the country commander (if any; could be garrison)
front_country_troop_weight = {
    value = "scope:front.num_enemy_units(root)"

    if = {
        limit = {
            exists = scope:character
            scope:character = {
                is_advancing_on_front = scope:front
            }
        }

        min = 5
        multiply = 4
    }
}

# root = province
# front = the front this battle will happen on
# own_commander = the commander leading this side in battle (if any; could be garrison)
# enemy_commander = the commander leading this side in battle (if any; could be garrison)
front_battle_province_weight = {
    value = 1
}

# the battalion size for each side in a land battle
# root = a country on the side being evaluated (this general's country, or this theater side owner if none)
# enemy_country = a country on the opposing side (the other general's country, or that theater side owner if none)
# front = the front to calculate troop weight for (if any; not during Naval Invasions)
# own_commander = the commander leading this side in battle (if any; could be garrison)
# enemy_commander = the commander leading this side in battle (if any; could be garrison)
# is_advancing_side = whether this side is the one advancing or not (defending = no)
# is_naval_invasion = if the battle is a naval landing battle
land_battle_size = {

    # Start with a baseline number of battalions equal to mobilized under direct command, or the enemy's number of mobilized battalions under direct command if no own_commander exists
    if = {
        limit = {
            exists = scope:own_commander
        }
        value = scope:own_commander.num_mobilized_battalions
		desc = "BATTLE_SIZE_OWN_COMMAND_BASELINE"
    }
    else = {
        value = scope:enemy_commander.num_mobilized_battalions
		desc = "BATTLE_SIZE_ENEMY_COMMAND_BASELINE"
    }

    # If own_commander exists and the enemy baseline force is larger, increase your force by a random amount up to the difference
    if = {
        limit = {
            exists = scope:own_commander
            exists = scope:enemy_commander
            scope:enemy_commander.num_mobilized_battalions > scope:own_commander.num_mobilized_battalions
        }
        add = {
            integer_range = {
                min = 0
                max = {
                    add = scope:enemy_commander.num_mobilized_battalions
                    subtract = scope:own_commander.num_mobilized_battalions
                }
            }
        }
		desc = "BATTLE_SIZE_ENEMY_NUMERIC_ADVANTAGE"
    }

    # If we are advancing and the enemy baseline force has higher combat stats where it matters, increase your force by a random percentage up to the difference
    if = {
        limit = {
            exists = scope:own_commander
            exists = scope:front
            scope:is_advancing_side = yes
            "scope:front.average_defense(scope:enemy_country)" > "scope:front.average_offense(root)"
        }
        multiply = {
            fixed_range = {
                min = 1
                max = {
                    add = "scope:front.average_defense(scope:enemy_country)"
                    divide = "scope:front.average_offense(root)"
                }
            }
        }
		desc = "BATTLE_SIZE_ENEMY_SKILL_ADVANTAGE"
    }

    # Cap to *actually available* troops; either the total number, or if own_commander is advancing, exclude defending commanders' troops
    if = {
        limit = {
            exists = scope:own_commander
            exists = scope:front
            scope:is_advancing_side = yes
        }
        max = {
            add = "scope:front.num_total_battalions(root)"
            subtract = "scope:front.num_defending_battalions(root)"
        }
		desc = "BATTLE_SIZE_MAX_AMOUNT_REACHED"
    }
	else_if = {
        limit = {
            exists = scope:front
        }

        max = "scope:front.num_total_battalions(root)"
		desc = "BATTLE_SIZE_MAX_AMOUNT_REACHED"
	}

    # Moderate final value based on the length of the front (on its shortest side)
    if = {
        limit = {
            exists = scope:front
        }

        multiply = {
            fixed_range = {
                min = 1
                max = scope:front.front_length
			}
			divide = scope:front.front_length
			pow = 1.75
        }
		
		floor = yes
		desc = "BATTLE_SIZE_FRONT_SIZE"
    }
	
	# If own_commander is advancing, ensure at least 1 Battalion is doing so
    if = {
        limit = {
            exists = scope:own_commander
            scope:is_advancing_side = yes
        }
        min = 1
		desc = "BATTLE_SIZE_MIN_AMOUNT_REACHED"
    }
}

# root = country
# own_commander = the commander leading this side in battle (if any; could be garrison)
# province = land province this battle takes place in
land_battle_unit_selection_weight = {
     value = 1
}

# the warships size for each side in a naval battle
# root = country
# enemy_country = the other country
# own_commander = the commander leading this side in battle (if any; could be garrison)
# enemy_commander = the commander leading this side in battle (if any; could be garrison)
naval_battle_size = {
     if = {
        limit = {
            exists = scope:own_commander
        }
        value = scope:own_commander.num_units
    }
}

# root = country
# own_commander = the commander leading this side in battle
# province = naval province this battle takes place in
naval_battle_unit_selection_weight = {
     value = 1
}

# the weight for how likely a unit is to take casualties over others
# root = combat unit
battle_unit_casualty_weight = {
    value = 1
}
